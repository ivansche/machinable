(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{380:function(e,t,a){"use strict";a.r(t);var n=a(42),s=Object(n.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"project-structure"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#project-structure"}},[e._v("#")]),e._v(" Project structure")]),e._v(" "),a("p",[a("em",[e._v("machinable")]),e._v(" projects are build around two corresponding concepts: The "),a("code",[e._v("Component")]),e._v(" that contains code that you would like to execute; and the "),a("code",[e._v("machinable.yaml")]),e._v(" configuration file that specifies the default configuration associated with the component.")]),e._v(" "),a("p",[e._v("The following sections will discuss these fundamentals in more detail. For now, let's focus on the file structure of the project. To create a machinable project, it's sufficient to create a folder or repository that contains a "),a("code",[e._v("machinable.yaml")]),e._v(":")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("my-example-project\n├── ...\n└── machinable.yaml\n")])])]),a("p",[e._v("Think of it as a README that provides basic definitions of the project's\ncomponents and their respective default configuration.")]),e._v(" "),a("div",{staticClass:"language-yaml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yaml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# machinable.yaml")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("components")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("optimization")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n      "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("data")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" sinus\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("components:models")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("linear_regression")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("gradient_descent")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n      "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("learning_rate")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("0.01")]),e._v("\n")])])]),a("p",[e._v("From the example definition above you can guess that this project implements a linear regression and some gradient based approach to solve some optimization problem. The file exposes all crucial parameters like the dataset or a model's learning rate. The definition also implicitly describes the file organisation of the component source code:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("my-example-project\n├── optimization.py\n├── models\n│   ├── linear_regression.py\n│   └── gradient_descent.py\n└── machinable.yaml\n")])])]),a("p",[e._v("While the directory structure and file names may differ from project to project, the "),a("code",[e._v("machinable.yaml")]),e._v(" acts as global entry point to any machinable project. In particular, it makes it easy inspect all relevant hyperparameters and the code organisation in one place.")])])}),[],!1,null,null,null);t.default=s.exports}}]);