(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{369:function(t,a,e){"use strict";e.r(a);var s=e(42),n=Object(s.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"components"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#components"}},[t._v("#")]),t._v(" Components")]),t._v(" "),e("p",[t._v("Components are the core interface to implement functionality in a machinable project. Technically, they are simply classes that inherit from the base class "),e("code",[t._v("machinable.Component")]),t._v(" as defined in the python module that is specified in the\n"),e("code",[t._v("machinable.yaml")]),t._v(". For instance, to implement a components that encapsulates some optimization problem, we could create the following source file:")]),t._v(" "),e("div",{staticClass:"language-python extra-class"},[e("pre",{pre:!0,attrs:{class:"language-python"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# optimization.py")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" machinable "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" Component\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("DummyOptimization")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Component"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("on_create")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n            "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Creating the optimization model with the following configuration: "')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n            self"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("config"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("on_execute")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" i "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("range")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n            "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Training step"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" i"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),e("p",[t._v("Note that it does not matter how you name the class as long as the class inherits from the components base class and is registered in the "),e("code",[t._v("machinable.yaml")]),t._v(", for instance:")]),t._v(" "),e("Annotated",{attrs:{name:"optimization",debug:!1}},[e("div",{staticClass:"language-yaml extra-class"},[e("pre",{pre:!0,attrs:{class:"language-yaml"}},[e("code",[e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("components")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("optimization")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" \n     "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("learning_rate")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.1")]),t._v("\n")])])])]),t._v(" "),e("h2",{attrs:{id:"execution"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#execution"}},[t._v("#")]),t._v(" Execution")]),t._v(" "),e("p",[t._v("The key idea of a component is to encapsulate an executable unit of your code. It is useful to think of them as 'functions' that you can call with different configuration arguments. In fact, executing a component is not very different from a standard function call:")]),t._v(" "),e("div",{staticClass:"language-python extra-class"},[e("pre",{pre:!0,attrs:{class:"language-python"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" machinable "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" execute\nexecute"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"optimization"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),e("p",[t._v("Component "),e("RouterLink",{attrs:{to:"/guide/execution.html"}},[t._v("execution")]),t._v(" will be covered in greater detail later, but at this point, it is useful to think of it as a function call that provides arguments (i.e. the configuration, a random seed, a directory to store results etc.) and that triggers the component code.\nThe Component class can thus be seen as providing a variety of interfaces that bootstrap the implementation of the 'component function' for given arguments.")],1),t._v(" "),e("h2",{attrs:{id:"life-cycle"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#life-cycle"}},[t._v("#")]),t._v(" Life cycle")]),t._v(" "),e("p",[t._v("Components expose a number of life cycle events that can be overwritten to hook into the execution 'function call' at a certain point. All event methods start with "),e("code",[t._v("on_")]),t._v(" and are documented in the "),e("RouterLink",{attrs:{to:"/reference/component.html"}},[t._v("event reference")]),t._v(". In the example above, the "),e("code",[t._v("on_create")]),t._v(" and "),e("code",[t._v("on_execute")]),t._v(" events are implemented and will thus be triggered during execution.")],1),t._v(" "),e("p",[t._v("The components life cycle allows you to implement using any framework and standard python methods without worrying about the execution logic (i.e. configuration parsing, parallel execution, etc.). Moreover, the event paradigm provides a clear semantic while the object orientation enables flexible code sharing mechanisms (e.g. inheritance, "),e("RouterLink",{attrs:{to:"/guide/mixins.html"}},[t._v("mixins")]),t._v(", etc.).")],1),t._v(" "),e("h2",{attrs:{id:"self-config"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#self-config"}},[t._v("#")]),t._v(" self.config")]),t._v(" "),e("p",[t._v("Components can consume their configuration via the "),e("code",[t._v("self.config")]),t._v(" object:")]),t._v(" "),e("div",{staticClass:"language-python extra-class"},[e("pre",{pre:!0,attrs:{class:"language-python"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" machinable "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" Component\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MyComponent")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Component"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("on_create")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("config"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("config_value"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("config"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("nested"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("value"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("config"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"nested"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"value"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n")])])]),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v(">>> 1\n    2\n    2\n")])])]),e("p",[t._v("For convenience, the dict interface can be accessed using the "),e("code",[t._v(".")]),t._v(" object notation and provides a few helper methods like pretty-printing "),e("code",[t._v("pprint")]),t._v(" etc.")]),t._v(" "),e("h2",{attrs:{id:"self-flags"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#self-flags"}},[t._v("#")]),t._v(" self.flags")]),t._v(" "),e("p",[t._v("Flags are configuration values that are associated with the particular execution, for example the random seeds or worker IDs. They are accessible via the "),e("code",[t._v("self.flags")]),t._v(" object, that supports the "),e("code",[t._v(".")]),t._v(" object notation. You can add your own flags through basic assignment, e.g. "),e("code",[t._v("self.flags.counter = 1")]),t._v(". To avoid name collision, all native machinable flags use UPPERCASE (e.g. "),e("code",[t._v("self.flags.SEED")]),t._v(").")]),t._v(" "),e("h2",{attrs:{id:"self-storage"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#self-storage"}},[t._v("#")]),t._v(" self.storage")]),t._v(" "),e("p",[e("code",[t._v("self.storage")]),t._v(" provides access to the storage directory of the component (each component directy name is unique and managed automatically so you don't have to specify where the data is being stored). The data can later be retrieved using the "),e("RouterLink",{attrs:{to:"/guide/storage.html"}},[t._v("storage interfaces")]),t._v(".")],1),t._v(" "),e("p",[e("strong",[t._v("Log")])]),t._v(" "),e("p",[e("code",[t._v("self.storage.log")]),t._v(" or "),e("code",[t._v("self.log")]),t._v(" provides a standard logger interface that outputs to the console and a log file.")]),t._v(" "),e("div",{staticClass:"language-python extra-class"},[e("pre",{pre:!0,attrs:{class:"language-python"}},[e("code",[t._v("self"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("log"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("info"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Component created'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nself"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("log"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("debug"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Component initialized'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),e("p",[e("strong",[t._v("Records")])]),t._v(" "),e("p",[e("code",[t._v("self.storage.record")]),t._v(" or "),e("code",[t._v("self.record")]),t._v(" provides an interface for tabular logging, that is, storing recurring data points at each iteration. The results become available as a table where each row represents each iteration.")]),t._v(" "),e("div",{staticClass:"language-python extra-class"},[e("pre",{pre:!0,attrs:{class:"language-python"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" iteration "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("range")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    self"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("record"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'iteration'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" iteration\n    loss"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" acc "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# write column values")]),t._v("\n    self"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("record"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'accuracy'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" acc\n    self"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("record"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'loss'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" loss\n\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# save at the end of the iteration to start a new row")]),t._v("\n    self"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("record"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("save"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),e("p",[t._v("If you use the "),e("code",[t._v("on_execute_iteration")]),t._v(" event, iteration information and "),e("code",[t._v("record.save()")]),t._v(" will be triggered automatically at the end of each iteration.")]),t._v(" "),e("p",[t._v("Sometimes it is useful to have multiple tabular loggers, for example to record training and validation performance separately. You can create custom record loggers using "),e("code",[t._v("self.storage.get_record_writer(scope)")]),t._v(" which returns a new instance of a record writer that you can use just like the main record writer.")]),t._v(" "),e("p",[e("strong",[t._v("Custom data")])]),t._v(" "),e("p",[t._v("Any other data can be stored in the "),e("code",[t._v("data/")]),t._v(" subdirectory.")]),t._v(" "),e("p",[t._v("You can use "),e("code",[t._v("self.storage.write_data()")]),t._v(" to write any other Python object, for example:")]),t._v(" "),e("div",{staticClass:"language-python extra-class"},[e("pre",{pre:!0,attrs:{class:"language-python"}},[e("code",[t._v("self"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("storage"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("save_data"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'data.txt'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'a string'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nself"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("storage"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("save_data"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'data.p'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" generic_object"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nself"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("storage"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("save_data"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'data.json'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" jsonable_object"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nself"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("storage"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("save_data"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'data.npy'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" numpy_array"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),e("p",[t._v("To protect against unintended data loss, you can set "),e("code",[t._v("overwrite=False")]),t._v(".")]),t._v(" "),e("h2",{attrs:{id:"config-methods"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#config-methods"}},[t._v("#")]),t._v(" Config methods")]),t._v(" "),e("p",[t._v("While config references allow you to make static references, configuration values can be more complex. They might, for example, evolve during the course of execution or obey non-trivial conditions. Config methods allow you to implement such complex configuration values. To define a config method just add a regular Python method to the components class. The method name must start with "),e("code",[t._v("config_")]),t._v(". You can then 'call' the method directly in the "),e("code",[t._v("machinable.yaml")]),t._v(" configuration, for example:")]),t._v(" "),e("div",{staticClass:"language-yaml extra-class"},[e("pre",{pre:!0,attrs:{class:"language-yaml"}},[e("code",[e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("components")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("my_network")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("batch_size")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("32")]),t._v("\n      "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("learning_rate")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" base_learning_rate(2"),e("span",{pre:!0,attrs:{class:"token important"}},[t._v("**-5)")]),t._v("\n")])])]),e("p",[t._v("Here, the learning rate parameter is defined as a config method that takes a base learning rate parameter. The config method "),e("code",[t._v("config_base_learning_rate")]),t._v(" needs to be defined in the corresponding component:")]),t._v(" "),e("div",{staticClass:"language-python extra-class"},[e("pre",{pre:!0,attrs:{class:"language-python"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" machinable "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" Component\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MyBaseModel")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Component"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("on_create")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Training with lr='")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" self"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("config"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("learning_rate"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("config_base_learning_rate")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" lr"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" lr "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" self"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("config"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("batch_size\n")])])]),e("p",[t._v("The method is executed whenever "),e("code",[t._v("self.config.learning_rate")]),t._v(" is being accessed; as a result, the execution output prints:")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v(">>> 'Training with lr=1'\n")])])]),e("p",[t._v("Config methods hence allow for the expression of arbitrary configuration dependencies and are a powerful tool for implementing complex configuration patterns more efficiently. They can also be useful for parsing configuration values into Python objects. For instance, you might define a config method "),e("code",[t._v("dtype")]),t._v(" where "),e("code",[t._v("dtype: dtype('f32')")]),t._v(" returns "),e("code",[t._v("np.float32")]),t._v(" etc.")]),t._v(" "),e("h2",{attrs:{id:"composition"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#composition"}},[t._v("#")]),t._v(" Composition")]),t._v(" "),e("p",[t._v("Components can be composed together to form new components. Learn more about "),e("RouterLink",{attrs:{to:"/guide/composition.html"}},[t._v("Reusability & Composition")]),t._v(" of components.")],1)],1)}),[],!1,null,null,null);a.default=n.exports}}]);