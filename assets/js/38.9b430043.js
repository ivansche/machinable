(window.webpackJsonp=window.webpackJsonp||[]).push([[38],{396:function(t,a,s){"use strict";s.r(a);var n=s(42),e=Object(n.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"machinable-yaml"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#machinable-yaml"}},[t._v("#")]),t._v(" machinable.yaml")]),t._v(" "),s("p",[t._v("machinable's configuration file "),s("code",[t._v("machinable.yaml")]),t._v(" must be placed at root of the project directory.")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[t._v("my-machinable-project\n├── ...\n└── machinable.yaml\n")])])]),s("p",[t._v("The following describes an example structure")]),t._v(" "),s("ul",[s("li",[t._v("Lines starting with "),s("code",[t._v("#")]),t._v(" describe the keys")]),t._v(" "),s("li",[s("code",[t._v("#!")]),t._v(" describe the structure")]),t._v(" "),s("li",[t._v("types are denoted in brackets "),s("code",[t._v("[]")])])]),t._v(" "),s("div",{staticClass:"language-yaml extra-class"},[s("pre",{pre:!0,attrs:{class:"language-yaml"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Name of the project")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#! name: [String, must form valid Python module descriptor]")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" example_project\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Imports")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#! +: [List]")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("+")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#! [ String, valid Python variable name ]: [String, git/symlink/path]")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("fooba_project")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# List of all registered mixins and their configuration")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#! mixins: [List]")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("mixins")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#! [String, Python import path]=[String, alias name, valid Python variable]: [Dict]")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("mixins.trait=trait")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("key")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("data")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean important"}},[t._v("True")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#! [String, Python import path]^[String, inherit from name or alias]=[alias]:[Dict]")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("extended^mixins.trait")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("key")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("extension")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" data\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#! +.[ String, import project ].[ String, mixin name ]=[alias]: [Dict]")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("+.fooba.test=test")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("override")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean important"}},[t._v("True")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Inherit from import")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#! [ String, Import path ]^+.[ String, import project]: [Dict]")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("inherit^+.fooba.experiments.start")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("extended")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean important"}},[t._v("true")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# List of all registered components and their configuration")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#! components: [List]")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("components")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#! Same structure as Mixin list (see above)")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("example_component")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("alpha")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean important"}},[t._v("False")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("beta")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" \n      "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Version that overrides existing keys")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# ~[String]: [Dict]")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("~one")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("alpha")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("~two")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("alpha")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("~three")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("alpha")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("~nested")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n          "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("alpha")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v("\n          "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("beta")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" nested\n          "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("~nestednested")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("beta")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" overwritte\n      "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("~nested")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("alpha")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("component_with_mixins")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# List of mixins. Order determines priority of mixin inheritance")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#! _mixins_: [List]")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("_mixins_")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token tag"}},[t._v("!")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# [String, mixin name or alias]")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" trait\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" test\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("configmethods")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Configuration methods that can be used as value anywhere")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#! [String]: [config method]")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("method")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" hello()\n      "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("argmethod")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" arghello('world')\n      "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("nested")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("method")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" hello()\n      "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("keyarg")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" kwarghello(works=True)\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("flat_notation")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 'flattened' notation of nested structures")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("flat.can.be.useful")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean important"}},[t._v("False")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("inherited.flat")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" value\n      "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("~flat_version")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("flat")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n          "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("nested")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean important"}},[t._v("False")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("flat.version")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("referencing")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("target")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'come find me'")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Global referencing in the entire file")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#! $.[path.to.value]")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("globally")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" $.random_key\n      "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Local referencing in current component")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#! $self.[path.to.value]")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("locally")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" $self.target\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Component groups")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#! components:[String, Python module name]: [List]")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("components:example_module")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# -> example_module.example_component")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("example_component")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Any other keys in the global scope are allowed")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("random_key")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5e-6")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Embedding of external files")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#! $/[filepath.yaml|.json]")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("outsourcing")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" $/outsourced.yaml\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Environment variables using the default bash syntax")]),t._v("\n$"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("envvarkey"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("default"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" $envvarvalue\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Includes to append to different sections")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("includes")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" $/path/to_file.yaml\n")])])])])}),[],!1,null,null,null);a.default=e.exports}}]);